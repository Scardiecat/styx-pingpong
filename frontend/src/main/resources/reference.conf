settings {
  orig_ip = "localhost"
  ip = ${settings.orig_ip}
  ip = ${?HOST_IP}
  port = 2551
  port = ${?HOST_PORT}
}

cluster-dispatcher {
  type = "Dispatcher"
  executor = "fork-join-executor"
  fork-join-executor {
    parallelism-min = 2
    parallelism-max = 4
  }
}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }
  remote {
    netty.tcp {
      # Internal Docker
      bind-hostname = localhost  # This cannot be left as localhost/127.0.0.1!  Reset this value in code to internal IP.
      bind-port     = 2551

      # External Docker addr
      hostname = ${settings.ip}
      port     = ${settings.port}
    }
  }

  cluster {
    auto-down-unreachable-after = 20s
    failure-detector.threshold = 12
    failure-detector.acceptable-heartbeat-pause = 3
    log-info = on
    use-dispatcher = cluster-dispatcher
  }
}

akka.actor.deployment {
  /PingPongDispatcher = {
    router = adaptive-group
    # metrics-selector = heap
    # metrics-selector = load
    # metrics-selector = cpu
    metrics-selector = mix
    nr-of-instances = 100
    routees.paths = ["/user/PongActor"]
    cluster {
      enabled = on
      use-role = pingpong-backend
      allow-local-routees = off
    }
  }

  /AdminDispatcher = {
    router = adaptive-group
    # metrics-selector = heap
    # metrics-selector = load
    # metrics-selector = cpu
    metrics-selector = mix
    nr-of-instances = 100
    routees.paths = ["/user/PongActor"]
    cluster {
      enabled = on
      use-role = pingpong-backend
      allow-local-routees = off
    }
  }
}
# //#adaptive-router

# disable legacy metrics in akka-cluster, since it is still enabled in akka-cluster by default
akka.cluster.metrics.enabled=off
akka.extensions = [ "akka.cluster.metrics.ClusterMetricsExtension" ]

kamon {

  # What should be recorder
  metrics {
    filters = [
      {
        # actors we should be monitored
        actor {
          includes = [ "user/*", "user/worker-*" ] # a list of what should be included
          excludes = [ "system/*" ]                # a list of what should be excluded
        }
      },

      # not sure about this yet. Looks important
      {
        trace {
          includes = [ "*" ]
          excludes = []
        }
      }
    ]
  }

  # ~~~~~~ StatsD configuration ~~~~~~~~~~~~~~~~~~~~~~~~

  statsd {
    # Hostname and port in which your StatsD is running. Remember that StatsD packets are sent using UDP and
    # setting unreachable hosts and/or not open ports wont be warned by the Kamon, your data wont go anywhere.
    hostname = "127.0.0.1"
    hostname = ${?STATSD_HOST_NAME}
    port = 8125

    # Interval between metrics data flushes to StatsD. It's value must be equal or greater than the
    # kamon.metrics.tick-interval setting.
    flush-interval = 10 second

    # Max packet size for UDP metrics data sent to StatsD.
    max-packet-size = 1024 bytes

    # Subscription patterns used to select which metrics will be pushed to StatsD. Note that first, metrics
    # collection for your desired entities must be activated under the kamon.metrics.filters settings.
    includes {
      actor       = [ "*" ]
      trace       = [ "*" ]
      dispatcher  = [ "*" ]
    }

    simple-metric-key-generator {
      # Application prefix for all metrics pushed to StatsD. The default namespacing scheme for metrics follows
      # this pattern:
      #    application.host.entity.entity-name.metric-name
      application = "styx-pingpong"
    }
  }
}

kamon.internal-config {
  akka {
    loglevel = DEBUG

    actor.default-dispatcher {
      fork-join-executor.parallelism-factor = 1.0
    }

    cluster.metrics.enabled=off
    extensions = [ "akka.cluster.metrics.ClusterMetricsExtension" ]
  }
}